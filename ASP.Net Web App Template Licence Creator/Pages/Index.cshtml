@page
@model RazorPagesDemo.Pages.Forms.IndexModel
@{
    ViewData["Title"] = "Select least 4 features";
    Layout = null;
}


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Licence Creator Tool Kit</title>
        
    <style>

        body {
            background-image:-moz-radial-gradient(black, grey);
            background-color: #cccccc;
        }

        h1 {
            margin-bottom:10px;
            text-align: center;
        }

        /*forms*/
        #featureForm {
            max-width: 400px;
            margin: auto;
        }

        #defaulttextForm {
            max-width: 100px;
            margin: auto;
        }

        #quicksettingForm {
            max-width: 400px;
            margin: auto;
        }

        #selectForm {
            max-width: 400px;
            margin: auto;
        }

        #aiversionlimitselectslabelForm {
            max-width:400px;
            margin: auto;
        }

        #savesendresetuploadForm {
            max-width: 400px;
            margin: auto;
        }

        #upload_jsonForm {
            max-width:100px;
            margin:auto;
        }

        #setalltrueForm {
            max-width: 400px;
            margin: auto;
        }

        #sendstatForm {
            max-width: 400px;
            margin: auto;
        }

        #loadfromserverForm {
            max-width: 100px;
            margin: auto;
        }

        /*#upload_quicksettingForm {
            max width:100px;
            margin: auto;
        }*/

        /*end of forms*/

        .features {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            top: 100px;
        }

        .feature {
            display:flex;
            margin-bottom: 15px;
        }

        .feature_checkbox {
            cursor: pointer;
            display:flex;
            position:relative;
            left:10px;
            top: -8px;

        }

        label {
            font-size: 16px;
            margin-right: 15px;
        }

        input[type="checkbox"] {
            width: 20px;
            height: 20px;
        }

        input[type="file"] {
            
        }

        select {
            cursor: pointer;
            width: 120px;
            height: 30px;
            background-color: grey;
        }

        button {
            cursor: pointer;
            font-size: 15px;
            margin-top: 10px;
            width: 70px;
            height: 30px;
            margin-right: 10px;
        }       

        #fileInput {
            display: none;
            position:relative;
            top: -100px;
            left: -40px;
        }

        .ai-version-limit_selects select {
            display:flex;
            flex-direction:column;
            position:relative;
            width:90px;
            height:25px;
            margin-bottom:5px;
            top:-90px;
            left:160px;
        }

        .aiversionlimitselectslabel {
            display:flex;
            gap:10px;
            flex-direction:column;
            margin-bottom:10px;
            margin-top:30px;
        }

        .sendStatus {
            position:relative;
            display: flex;
            top: -560px;
            left: 575px;
            font-size:18px;
            color: green;
        }

        .dftextMain {
            display:flex;
            flex-direction:column;
            justify-content: flex-end;
        }

        .defaultText {
            flex-wrap:nowrap;
            font-size: 15px;
            align-items:center;
            position: relative;
            margin-bottom: 30px;
            top: 190px;
            left: -30px;
        }

        .container_quicksetting {
            display:flex;
            flex-direction: row;
            margin-bottom: 0px;
        }

        .shapeElement {
            outline-color:white;
            /*color: white;*/
            background-color: grey;
            cursor: pointer;
            align-items: center;
            font-size: 18px;
            width: 120px;
            height: 30px;
            margin-left: 10px;
            position: relative;
            top: -770px;
            left: 100px;
            padding-block-start: 10px;
            padding-left: 0px;
            text-align: center;
            border-radius: 3px;
            box-shadow: 0 0px #999;
            transition: background-color 0.3s ease-out, 
                        color 0.3s ease-in-out;
        }

        .shapeElement:hover {
            background-color: black;
            color: white;
            cursor: pointer;
        }

        .shapeElement:active {
            box-shadow: 0 0px #666;
            transform: translateY(2px);
        }

        .setalltrueButton {
            display: flex;
            position: relative;
            flex-direction: row;
        }

        .shapeElementetallarue {
            cursor:pointer;
            color:black;
            position:relative;
            background: grey;
            align-items: center;
            width: 92px;
            height: 30px;
            top: -730px;
            left: -5px;
            padding-block-start: 10px;
            padding-left: 0px;
            text-align: center;
            border-radius: 3px;
            box-shadow: 0 0px #999; 
            transition: background-color 0.3s ease-out,
                        color 0.3s ease-in-out;
        }

        .shapeElementetallarue:hover {
            background-color: black;
            color:white;
            cursor: pointer;
        }

        .shapeElementetallarue:active {
            box-shadow:0 0px #666;
            transform: translateY(2px);
        }

        .upload_json {
            cursor:pointer;
            color:blue;
            text-decoration:underline;
            display:flex;
            position:relative;
            top: -60px;
            left: 60px;
            /*transition: transform 250ms;*/
        }
        /*.upload_json:hover {
            transform: translateY(-10px);
        }*/


        /*.upload_quicksettingMain {
            display:flex;
            flex-direction:row;
        }

        .upload_quicksetting {
            cursor:pointer;
            color:black;
            font-family:Arial;
            margin-right:100px;
            position:relative;
            top: -830px;
            left: 275px;
            text-decoration:underline;
        }*/


        .savesendresetupload {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
        }

        .savesendresetuploadutton {
            outline-color: white;
            /*color: white;*/
            background-color: grey;
            cursor: pointer;
            padding-block-start : 10px;
            padding-left: 0px;
            text-align:center;
            font-size: 18px;
            width: 120px;
            height: 30px;
            position: relative;
            margin-bottom: -10px;
            top: -283px;
            left: 330px;
            border-radius: 3px;
            box-shadow: 0 0px #999;
            transition: background-color 0.3s ease-out, 
                        color 0.3s ease-in-out;
        }

        .savesendresetuploadutton:hover {
            background-color: black;
            color: white;
            cursor: pointer;
        }

        .savesendresetuploadutton:active {
            box-shadow: 0 0px #666;
            transform: translateY(2px);
        }

        .loadfromserverbuton {
            display:none;
            background-color: grey;
            cursor: pointer;
            padding-block-start: 10px;
            width: 100px;
            height: 50px;
            text-align: center;
            font-size: 18px;
            position:relative;
            top:400px;
            left:230px;
            border-radius: 3px;
            box-shadow: 0 0px #999;
            transition: background-color 0.3s ease-out, color 0.3s ease-in-out;
        }

        .loadfromserverbuton:hover {
            background-color: black;
            color: white;
            cursor: pointer;
        }

    </style>
</head>

<body>

    <form id="loadfromserverForm">
            <div class="loadfromserverbuton" display="none" id="loadFromServerBtn" onclick="processFileData()">Load from Server</div>
    </form>

    <h1>Licence Creator Tool Kit</h1>

    <form id="defaulttextForm">
        <div class="dftextMain">
            <div class="defaultText">(default feature)</div>
            <div class="defaultText">(default feature)</div>
        </div>
    </form>


    <form id="featureForm">
        <div class="features">
            <div class="feature" for="feature1">Feature 1:</div>
            <input class="feature_checkbox" type="checkbox" id="feature1" name="feature1">
        </div>

        <div class="features">
            <div class="feature" for="feature2">Feature 2:</div>
            <input class="feature_checkbox" type="checkbox" id="feature2" name="feature2">
        </div>

        <div class="features">
            <div class="feature" for="feature3">Feature 3:</div>
            <input class="feature_checkbox" type="checkbox" id="feature3" name="feature3" checked>
        </div>

        <div class="features">
            <div class="feature" for="feature4">Feature 4:</div>
            <input class="feature_checkbox" type="checkbox" id="feature4" name="feature4" checked>
        </div>

        <div class="features">
            <div class="feature" for="feature5">Feature 5:</div>
            <input class="feature_checkbox" type="checkbox" id="feature5" name="feature5">
        </div>

        <div class="features">
            <div class="feature" for="feature6">Feature 6:</div>
            <input class="feature_checkbox" type="checkbox" id="feature6" name="feature6">
        </div>
    </form>

    <form id="aiversionlimitselectslabelForm">
        <div class="aiversionlimitselectslabel">
            <div for="aiFeature">AI Feature:</div>
            <div for="softwareVersion">Software Version:</div>
            <div for="userLimit">User Limit:</div>
        </div>
    </form>

    <form id="selectForm">
        <div class="ai-version-limit_selects">
            
            <select id="aiFeature" name="aiFeature">
                <option value="none">(none)</option>
                <option value="basic">Basic</option>
                <option value="gold">Gold</option>
                <option value="premium">Premium</option>
            </select>
            
            
            <select id="softwareVersion" name="softwareVersion">
                <option value="7.1.0">7.1.0</option>
                <option value="7.1.6">7.1.6</option>
                <option value="7.1.9" selected>7.1.9</option>
                <option value="7.2.0">7.2.0</option>
                <option value="7.2.5">7.2.5</option>
                <option value="7.2.9">7.2.9</option>
                <option value="7.3.0">7.3.0</option>
                <option value="latestRelease">Latest Release</option>
            </select>
        
            
            <select id="userLimit" name="userLimit">
                <option value="5" selected>5 (minimum)</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="30">30</option>
                <option value="40">40</option>
                <option value="+50">+50</option>
            </select>
        </div>
    </form>
    


    <form id="upload_jsonForm">
        <div class="upload_json">
            <div class="upload_json" onclick="triggerFileInput()">Upload Json</div>
            @*<input type="file" id="fileInput" accept=".json" onchange="readFile(this)">*@
        </div>
    </form>

    <form id="savesendresetuploadForm">
         <dir class="savesendresetupload">
             <dir class="savesendresetuploadutton" onclick="generateJSON()">Save</dir>
             <dir class="savesendresetuploadutton" onclick="generateJSONAndSend()">Send</dir>
             <dir class="savesendresetuploadutton" onclick="setDefault()">Reset to Default</dir>                
         </dir>
    </form>

    <form id="setalltrueForm">
        <div class="setalltrueButton">
            <div class="shapeElementetallarue" id="setalltruebutton4" onclick="setAllTrue()">Set All True</div>
        </div>
    </form>

    <form id="quicksettingForm">
        <div class="container_quicksetting">
            <div class="shapeElement" id="quicksetting1" onclick="quickSetting1()">Quickload 1</div>
            <div class="shapeElement" id="quicksetting2" onclick="quickSetting2()">Quickload 2</div>
            <div class="shapeElement" id="quicksetting3" onclick="quickSetting3()">Quickload 3</div>
        </div>
    </form>


    @*
    <form id="upload_quicksettingForm">
        <div class="upload_quicksettingMain">
            <div class="upload_quicksetting" id="Load1">load</div>
            <div class="upload_quicksetting" id="Load2">load</div>
            <div class="upload_quicksetting" id="Load3">load</div>
        </div>
    </form>
    *@
    <div class="sendStatus" id="sendStatus"></div>

    <script>


       /*
             CHANGING COLOR WHILE CURSOR ON/OFF using another way which does not worth its long

        var originalColor; 
        <dir onmouseover="changeColor7()" onmouseout="resetColor7()" onclick="setDefault()"</dir>      

        function changeColor1() {
            var shapeElement = document.getElementById("quicksetting1");
            originalColor = shapeElement.style.backgroundColor;
            shapeElement.style.color = "white";
        }
        function resetColor1() {
            var shapeElement = document.getElementById("quicksetting1");
            shapeElement.style.backgroundColor = originalColor;
            shapeElement.style.color = "black";
        }
        */
        function generateJSON() {
            // Formdaki checkbox değerlerini al
            var feature1 = document.getElementById("feature1").checked;
            var feature2 = document.getElementById("feature2").checked;
            var feature3 = document.getElementById("feature3").checked;
            var feature4 = document.getElementById("feature4").checked;
            var feature5 = document.getElementById("feature5").checked;
            var feature6 = document.getElementById("feature6").checked;
            
            var aiFeatureElement = document.getElementById("aiFeature");
            var aiFeature = aiFeatureElement.options[aiFeatureElement.selectedIndex].value;

            var softwareVersionElement = document.getElementById("softwareVersion");
            var softwareVersion = softwareVersionElement.options[softwareVersionElement.selectedIndex].value;



            var userLimitElement = document.getElementById("userLimit");
            var userLimit = userLimitElement.options[userLimitElement.selectedIndex].value;
            
            // JSON nesnesi oluştur
            var jsonContent = {
                "Feature 1": feature1,
                "Feature 2": feature2,
                "Feature 3": feature3,
                "Feature 4": feature4,
                "Feature 5": feature5,
                "Feature 6": feature6,
                "AI Feature": aiFeature,
                "Software Version": softwareVersion,
                "User Limit": userLimit
            };

            // Dosyayı indirmek için bir Blob oluştur
            var blob = new Blob([JSON.stringify(jsonContent, null, 2)], {
                type: "application/json"
            });

            // Dosyayı indirmek için bir bağlantı oluştur
            var a = document.createElement("a");
            a.href = URL.createObjectURL(blob);

            // Dosya adını belirt
            a.download = "features.json";

            // Bağlantıya tıkla
            a.click();
        }

        function generateJSONAndSend() {
            // Formdaki checkbox değerlerini al
            var feature1 = document.getElementById("feature1").checked;
            var feature2 = document.getElementById("feature2").checked;
            var feature3 = document.getElementById("feature3").checked;
            var feature4 = document.getElementById("feature4").checked;
            var feature5 = document.getElementById("feature5").checked;
            var feature6 = document.getElementById("feature6").checked;
            
            var aiFeatureElement = document.getElementById("aiFeature");
            var aiFeature = aiFeatureElement.options[aiFeatureElement.selectedIndex].value;

            var softwareVersionElement = document.getElementById("softwareVersion");
            var softwareVersion = softwareVersionElement.options[softwareVersionElement.selectedIndex].value;

            
            var userLimitElement = document.getElementById("userLimit");
            var userLimit = userLimitElement.options[userLimitElement.selectedIndex].value;


            // JSON nesnesi oluştur
            var jsonContent = {
                "Feature 1": feature1,
                "Feature 2": feature2,
                "Feature 3": feature3,
                "Feature 4": feature4,
                "Feature 5": feature5,
                "Feature 6": feature6,
                "AI Feature": aiFeature,
                "Software Version": softwareVersion,
                "User Limit": userLimit
            };

            // JSON verisini gönder
            sendJSONToCommandPrompt(jsonContent);

            /*--------------------------------------------------------------------------*/
            function sendJSONToCommandPrompt(jsonContent) {
                // Tarih ve saat bilgisini al
                var currentDate = new Date();
                var currentDateTime = currentDate.toLocaleString();

                // JSON verisine tarih ve saat bilgisini ekle
                jsonContent["SentDateTime"] = currentDateTime;

                // Hedef URL'yi belirle
                var targetUrl = 'http://localhost:5018/';

                // JSON verilerini POST isteği ile gönder
                fetch(targetUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(jsonContent),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Command Prompt data:', data);
                        document.getElementById("sendStatus").innerHTML = "Sent!";
                        setTimeout(function () {
                            document.getElementById("sendStatus").innerHTML = "";
                        }, 3000);
                    })
                    .catch(error => {
                        console.error('Command Prompt error:', error);
                    });
            }
            /*--------------------------------------------------------------------------*/
        }

        function setCheckboxState(state, checkboxId) {
            if (checkboxId) {
                var specificCheckbox = document.getElementById(checkboxId);
                if (specificCheckbox) {
                    specificCheckbox.checked = state;
                }
            } else {
                // Belirli bir checkbox yoksa, tüm checkbox'ları seçilen duruma getir
                var checkboxes = document.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(function (checkbox) {
                    checkbox.checked = state;
                });
            }
        }



        function setDropdownValue(dropdownId, value) {
            var dropdown = document.getElementById(dropdownId);
            if (dropdown) {
                // Dropdown elemanının seçili değerini belirle
                dropdown.value = value;
            } else {
                console.error("Dropdown with id '" + dropdownId + "' not found!");
            }
        }

       
        function quickSetting1() {
            setCheckboxState(false);
            setCheckboxState(true, "feature1");
            setCheckboxState(true, "feature3");
            setCheckboxState(true, "feature5");
            setCheckboxState(true, "feature6");
            setDropdownValue("aiFeature", "none");
            setDropdownValue("softwareVersion", "7.3.0");
            setDropdownValue("userLimit", "+50");
        }

        function quickSetting2() {
            setCheckboxState(false);
            setCheckboxState(true, "feature2");
            setCheckboxState(true, "feature4");
            setDropdownValue("aiFeature", "gold");
            setDropdownValue("softwareVersion", "7.2.0");
            setDropdownValue("userLimit", "30");
        }

        function quickSetting3() {
            setCheckboxState(false);
            setCheckboxState(true, "feature1");
            setCheckboxState(true, "feature2");
            setCheckboxState(true, "feature4");
            setDropdownValue("aiFeature", "premium");
            setDropdownValue("softwareVersion", "latestRelease");
            setDropdownValue("userLimit", "40");
        }


        function setAllTrue() {
            setCheckboxState(true);
            console.log("set all true is working");
        }

        function setDefault() {
            setCheckboxState(false);
            setCheckboxState(true, "feature3");
            setCheckboxState(true, "feature4");
            setDropdownValue("aiFeature", "none");
            setDropdownValue("softwareVersion", "7.1.9");
            setDropdownValue("userLimit", "10");
        }

        function sendJSONToCommandPrompt(jsonContent) {
            // Hedef URL'yi belirle
            var targetUrl = 'http://localhost:5018/';

            // JSON verilerini POST isteği ile gönder
            fetch(targetUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(jsonContent),
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Command Prompt data:', data);
                    document.getElementById("sendStatus").innerHTML = "Sent!";
                    setTimeout(function () {
                        document.getElementById("sendStatus").innerHTML = "";
                    }, 2000);
                })
                .catch(error => {
                    console.error('Command Prompt error:', error);
                });
        }

        

        /* upload Jsonun dogru düzgün calisabilmesi icin bu durmak zorunda */
        function triggerFileInput() {

            var fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.json';
            fileInput.style.display = 'none';


            fileInput.addEventListener('change', function () {
                readFile(fileInput);

                document.body.removeChild(fileInput);
            });

            document.body.appendChild(fileInput);

            fileInput.click();
        }



        // Sunucudan gelen sinyali bekleyen fonksiyon
        function waitForButton() {
            // Server'dan gönderilen dosya kontrolü
            var serverSentFile = false; // Bu değeri server'dan gelen mesaja göre güncelleyin.

            // Server'dan dosya gönderildiyse butonu görünür hale getir
            if (serverSentFile) {
                document.querySelector('.loadfromserverbuton').style.display = 'block';
                console.log("Server sent a file.");
            } else {
                console.log("No file sent from the server.");
            }
        }

        // İlk başta sinyali bekleyin
        waitForButton();


        // İlk başta sinyali bekleyin
        waitForButton();


        // Dosya işlemleri
        function readFile(input) {
            var file = input.files[0];

            if (file) {
                var reader = new FileReader()
                reader.onload = function (e) {
                    var data = JSON.parse(e.target.result);

                    // check the unchecked data
                    updateCheckbox("feature1", data["Feature 1"]);
                    updateCheckbox("feature2", data["Feature 2"]);
                    updateCheckbox("feature3", data["Feature 3"]);
                    updateCheckbox("feature4", data["Feature 4"]);
                    updateCheckbox("feature5", data["Feature 5"]);
                    updateCheckbox("feature6", data["Feature 6"]);
                    updateDropdown("aiFeature", data["AI Feature"]);
                    updateDropdown("softwareVersion", data["Software Version"]);
                    updateDropdown("userLimit", data["User Limit"]);

                    console.log(data);
                };

                reader.readAsText(file);
            }
        }

        // Load from Server butonuna tıklanınca çalışacak fonksiyon
        document.querySelector('.loadfromserverbuton').addEventListener('click', function () {
            var fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.json';
            fileInput.style.display = 'none';

            fileInput.addEventListener('change', function () {
                readFile(fileInput);
                document.body.removeChild(fileInput);
            });

            document.body.appendChild(fileInput);
            fileInput.click();
        });

        function updateCheckbox(checkboxId, value) {
            var checkbox = document.getElementById(checkboxId);
            if (checkbox !== null && value !== undefined) {
                checkbox.checked = value;
            }
        }

        function updateDropdown(dropdownId, value) {
            var dropdown = document.getElementById(dropdownId);
            if (dropdown !== null && value !== undefined) {
                dropdown.value = value;
            }
        }

    </script>

</body>

</html>

